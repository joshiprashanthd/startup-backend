{"version":3,"sources":["webpack://backend/./src/config/gmail.config.ts","webpack://backend/./src/config/index.ts","webpack://backend/./src/config/mongo.config.ts","webpack://backend/./src/config/node.config.ts","webpack://backend/./src/config/session.config.ts","webpack://backend/./src/config/token.config.ts","webpack://backend/./src/connectDb.ts","webpack://backend/./src/dataloaders/conversation.ts","webpack://backend/./src/dataloaders/index.ts","webpack://backend/./src/dataloaders/message.ts","webpack://backend/./src/dataloaders/skill.ts","webpack://backend/./src/dataloaders/user.ts","webpack://backend/./src/entities/conversation/index.ts","webpack://backend/./src/entities/conversation/mapper.ts","webpack://backend/./src/entities/conversation/model/index.ts","webpack://backend/./src/entities/conversation/model/model.ts","webpack://backend/./src/entities/conversation/resolvers/index.ts","webpack://backend/./src/entities/conversation/resolvers/query.ts","webpack://backend/./src/entities/conversation/typedef/index.ts","webpack://backend/./src/entities/customDirectives/definitions/auth.ts","webpack://backend/./src/entities/customDirectives/definitions/guest.ts","webpack://backend/./src/entities/customDirectives/definitions/index.ts","webpack://backend/./src/entities/customDirectives/definitions/private.ts","webpack://backend/./src/entities/customDirectives/index.ts","webpack://backend/./src/entities/customDirectives/typedef/index.ts","webpack://backend/./src/entities/customScalars/index.ts","webpack://backend/./src/entities/customScalars/resolvers/Date.ts","webpack://backend/./src/entities/customScalars/resolvers/index.ts","webpack://backend/./src/entities/customScalars/typedef/index.ts","webpack://backend/./src/entities/index.ts","webpack://backend/./src/entities/message/index.ts","webpack://backend/./src/entities/message/mapper.ts","webpack://backend/./src/entities/message/model/index.ts","webpack://backend/./src/entities/message/model/model.ts","webpack://backend/./src/entities/message/resolver/index.ts","webpack://backend/./src/entities/message/resolver/mutation.ts","webpack://backend/./src/entities/message/resolver/query.ts","webpack://backend/./src/entities/message/typedef/index.ts","webpack://backend/./src/entities/projectRequest/index.ts","webpack://backend/./src/entities/projectRequest/mapper.ts","webpack://backend/./src/entities/projectRequest/model/index.ts","webpack://backend/./src/entities/projectRequest/model/model.ts","webpack://backend/./src/entities/projectRequest/model/types.ts","webpack://backend/./src/entities/projectRequest/resolvers/index.ts","webpack://backend/./src/entities/projectRequest/resolvers/mutation.ts","webpack://backend/./src/entities/projectRequest/resolvers/query.ts","webpack://backend/./src/entities/projectRequest/typedef/index.ts","webpack://backend/./src/entities/project/index.ts","webpack://backend/./src/entities/project/mapper.ts","webpack://backend/./src/entities/project/model/index.ts","webpack://backend/./src/entities/project/model/model.ts","webpack://backend/./src/entities/project/resolvers/index.ts","webpack://backend/./src/entities/project/resolvers/mutation.ts","webpack://backend/./src/entities/project/resolvers/query.ts","webpack://backend/./src/entities/project/typedef/index.ts","webpack://backend/./src/entities/resolvers.ts","webpack://backend/./src/entities/root/index.ts","webpack://backend/./src/entities/root/typedef/index.ts","webpack://backend/./src/entities/skill/index.ts","webpack://backend/./src/entities/skill/mapper.ts","webpack://backend/./src/entities/skill/model/index.ts","webpack://backend/./src/entities/skill/model/model.ts","webpack://backend/./src/entities/skill/resolvers/index.ts","webpack://backend/./src/entities/skill/resolvers/mutation.ts","webpack://backend/./src/entities/skill/resolvers/query.ts","webpack://backend/./src/entities/skill/typedef/index.ts","webpack://backend/./src/entities/typedef.ts","webpack://backend/./src/entities/user/index.ts","webpack://backend/./src/entities/user/mapper.ts","webpack://backend/./src/entities/user/model/index.ts","webpack://backend/./src/entities/user/model/model.ts","webpack://backend/./src/entities/user/resolvers/index.ts","webpack://backend/./src/entities/user/resolvers/mutation.ts","webpack://backend/./src/entities/user/resolvers/query.ts","webpack://backend/./src/entities/user/resolvers/subscription.ts","webpack://backend/./src/entities/user/typedef/index.ts","webpack://backend/./src/helpers/emailer/index.ts","webpack://backend/./src/helpers/functions/authentication.ts","webpack://backend/./src/helpers/functions/sendVerificationEmail.ts","webpack://backend/./src/index.ts","webpack://backend/./src/routes/auth/index.ts","webpack://backend/./src/routes/auth/verifyEmail/index.ts","webpack://backend/./src/routes/auth/verifyEmail/verifyEmail.ts","webpack://backend/./src/routes/index.ts","webpack://backend/./src/session.ts","webpack://backend/./src/startServer.ts","webpack://backend/external \"apollo-server-express\"","webpack://backend/external \"bcrypt\"","webpack://backend/external \"connect-mongo\"","webpack://backend/external \"dataloader\"","webpack://backend/external \"dotenv\"","webpack://backend/external \"express\"","webpack://backend/external \"express-session\"","webpack://backend/external \"graphql\"","webpack://backend/external \"graphql/language\"","webpack://backend/external \"jsonwebtoken\"","webpack://backend/external \"mongoose\"","webpack://backend/external \"nodemailer\"","webpack://backend/external \"ramda\"","webpack://backend/webpack/bootstrap","webpack://backend/webpack/startup"],"names":["config","gmailUser","process","env","GMAIL_USER","gmailPassword","GMAIL_PASSWORD","gmailSender","GMAIL_SENDER","default","mongoUserName","MONGO_USER","mongoUserPassword","MONGO_PASSWORD","mongoDatabaseName","MONGO_DATABASE","nodeEnvironment","sessionName","SESSION_NAME","sessionLifetime","SESSION_LIFETIME","sessionSecret","SESSION_SECRET","tokenSecret","TOKEN_SECRET","tokenExpiry","TOKEN_EXPIRY","toString","errorOccurred","connect","MongoConfig","useUnifiedTopology","useNewUrlParser","useFindAndModify","err","console","log","batchConversations","ids","Conversation","model","conversations","find","_id","$in","groupedConversations","groupBy","conversation","id","map","userLoader","skillLoader","messageLoader","conversationLoader","batchMessages","Message","messages","groupedMessages","message","batchSkills","Skill","skills","groupedSkills","skill","batchUsers","User","users","groupedUsers","user","mapConversation","context","conversers","mapUserIds","mapMessageIds","createdAt","updatedAt","mapConversations","Schema","ConversationSchema","type","Types","ObjectId","ref","timestamps","Query","conversationsByUser","parent","args","info","gql","AuthDirective","SchemaDirectiveVisitor","field","resolve","defaultFieldResolver","_","__","ensureSignedIn","apply","this","GuestDirective","ensureSignedOut","PrivateDirective","arg","req","session","userId","name","auth","guest","private","Date","GraphQLScalarType","description","parseValue","value","serialize","getTime","parseLiteral","ast","kind","Kind","INT","parseInt","mapMessage","body","read","sender","mapUserId","receiver","dataloaders","loadMany","MessageSchema","String","required","Boolean","Mutation","createMessage","create","input","senderId","receiverId","findOne","$all","updateOne","findByIdAndUpdate","$push","$each","$position","editMessage","messageId","new","removeMessage","findByIdAndDelete","mapProjectRequest","projectRequest","from","to","Project","findById","status","ProjectRequestSchema","enum","ProjectRequestStatusEnum","toggleRequestProject","oldRequest","ProjectRequest","projectId","deleteOne","raw","ApolloError","details","creator","PENDING","length","acceptProjectRequest","projectRequestId","project","AuthenticationError","ACCEPTED","result","projectRequests","mapProject","skillSet","mapSkillIds","stars","requests","request","isStarred","includes","isRequested","state","work","team","ProjectSchema","title","startingOn","duration","Number","maxTeamMembers","createProject","obj","skillId","editProject","doc","toObject","Object","assign","toggleStarProject","$pull","projects","projectsByUserInterests","skillIds","personalInfo","interests","projectById","UserResolvers","SkillResolvers","CustomScalarResolvers","MessageResolvers","ProjectResolvers","ProjectRequestResolvers","ConversationResolvers","mapSkill","color","SkillSchema","createSkill","CustomScalarTypeDef","DirectivesTypeDef","RootTypeDef","UserTypeDef","SkillTypeDef","MessageTypeDef","ProjectTypeDef","ProjectRequestTypeDef","ConversationTypeDef","mapUser","accountInfo","statusInfo","load","UserSchema","email","password","handler","verifiedEmail","bio","birthDate","isOnline","lastActive","versionKey","pre","isModified","hash","methods","comparePassword","compare","path","validate","createUser","token","sign","TokenConfig","expiresIn","sendVerificationEmail","editUser","interest","signIn","attemptSignIn","signOut","attemptSignOut","userDoc","me","Subscription","createTransport","service","GmailConfig","pass","res","Promise","reject","destroy","clearCookie","SessionConfig","sendMail","subject","html","authRoute","Router","use","route","next","params","payload","verify","send","routes","get","json","MongoStore","connection","createConnection","on","store","mongooseConnection","collection","error","mySession","secret","rolling","resave","saveUninitialized","cookie","maxAge","PORT","app","disable","server","ApolloServer","typeDefs","TypeDefs","resolvers","Resolvers","schemaDirectives","playground","settings","applyMiddleware","cors","credentials","origin","listen","port","graphqlPath","module","exports","require","__webpack_module_cache__","__webpack_require__","moduleId","__webpack_modules__","call"],"mappings":"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","file":"app.bundle.js","sourcesContent":["import * as dotenv from \"dotenv\";\r\ndotenv.config();\r\n\r\nexport default {\r\n\tgmailUser: process.env.GMAIL_USER ?? \"\",\r\n\tgmailPassword: process.env.GMAIL_PASSWORD ?? \"\",\r\n\tgmailSender: process.env.GMAIL_SENDER ?? \"prashantjoshi@collabs.com\"\r\n};\r\n","export { default as SessionConfig } from \"./session.config\";\r\nexport { default as MongoConfig } from \"./mongo.config\";\r\nexport { default as TokenConfig } from \"./token.config\";\r\nexport { default as GmailConfig } from \"./gmail.config\";\r\nexport { default as NodeConfig } from \"./node.config\";\r\n","import * as dotenv from \"dotenv\";\r\ndotenv.config();\r\n\r\nexport default {\r\n\tmongoUserName: process.env.MONGO_USER ?? \"\",\r\n\tmongoUserPassword: process.env.MONGO_PASSWORD ?? \"\",\r\n\tmongoDatabaseName: process.env.MONGO_DATABASE ?? \"\"\r\n};\r\n","import * as dotenv from \"dotenv\";\r\ndotenv.config();\r\n\r\nexport default {\r\n\tnodeEnvironment: process.env.NODE_ENV ?? \"development\"\r\n};\r\n","import * as dotenv from \"dotenv\";\r\ndotenv.config();\r\n\r\nexport default {\r\n\tsessionName: process.env.SESSION_NAME ?? \"\",\r\n\tsessionLifetime: process.env.SESSION_LIFETIME ?? \"1800000\",\r\n\tsessionSecret: process.env.SESSION_SECRET ?? \"secret\"\r\n};\r\n","import * as dotenv from \"dotenv\";\r\ndotenv.config();\r\n\r\nexport default {\r\n\ttokenSecret: process.env.TOKEN_SECRET ?? \"pokjnlakjdshq\",\r\n\ttokenExpiry: process.env.TOKEN_EXPIRY ?? (60 * 60 * 12).toString()\r\n};\r\n","import mongoose from \"mongoose\";\r\n\r\n//local\r\nimport { MongoConfig } from \"./config\";\r\n\r\nexport default async function () {\r\n\tlet errorOccurred = false;\r\n\ttry {\r\n\t\tawait mongoose.connect(\r\n\t\t\t`mongodb+srv://${MongoConfig.mongoUserName}:${MongoConfig.mongoUserPassword}@cluster0.vuqtk.mongodb.net/${MongoConfig.mongoDatabaseName}?retryWrites=true&w=majority`,\r\n\t\t\t{\r\n\t\t\t\tuseUnifiedTopology: true,\r\n\t\t\t\tuseNewUrlParser: true,\r\n\t\t\t\tuseFindAndModify: false\r\n\t\t\t}\r\n\t\t);\r\n\t} catch (err) {\r\n\t\terrorOccurred = true;\r\n\t} finally {\r\n\t\tif (errorOccurred) console.log(\"[MONGOOSE] error connecting to MongoDB\");\r\n\t\telse console.log(\"[SERVER] connected to database\");\r\n\t}\r\n}\r\n","import Dataloader from \"dataloader\";\r\nimport mongoose from \"mongoose\";\r\nimport { groupBy, map } from \"ramda\";\r\n\r\n//local\r\nimport {\r\n\tIConversationDocument,\r\n\tIConversationModel\r\n} from \"../entities/conversation/model\";\r\n\r\nasync function batchConversations(\r\n\tids: string[]\r\n): Promise<IConversationDocument[]> {\r\n\tconst Conversation = mongoose.model<\r\n\t\tIConversationDocument,\r\n\t\tIConversationModel\r\n\t>(\"Conversation\");\r\n\tconst conversations = await Conversation.find({ _id: { $in: ids } });\r\n\tconst groupedConversations = groupBy<IConversationDocument>(\r\n\t\tconversation => conversation.id,\r\n\t\tconversations\r\n\t);\r\n\treturn map(id => groupedConversations[id][0], ids);\r\n}\r\n\r\nexport default () =>\r\n\tnew Dataloader<string, IConversationDocument>(batchConversations);\r\n","import UserLoader from \"./user\";\r\nimport SkillLoader from \"./skill\";\r\nimport MessageLoader from \"./message\";\r\nimport ConversationLoader from \"./conversation\";\r\n\r\nexport interface IDataloaders {\r\n\tuserLoader: ReturnType<typeof UserLoader>;\r\n\tskillLoader: ReturnType<typeof SkillLoader>;\r\n\tmessageLoader: ReturnType<typeof MessageLoader>;\r\n\tconversationLoader: ReturnType<typeof ConversationLoader>;\r\n}\r\n\r\nexport default {\r\n\tuserLoader: UserLoader(),\r\n\tskillLoader: SkillLoader(),\r\n\tmessageLoader: MessageLoader(),\r\n\tconversationLoader: ConversationLoader()\r\n} as IDataloaders;\r\n","import Dataloader from \"dataloader\";\r\nimport mongoose from \"mongoose\";\r\nimport { groupBy, map } from \"ramda\";\r\n\r\n//local\r\nimport { IMessageDocument, IMessageModel } from \"../entities/message/model\";\r\n\r\nasync function batchMessages(ids: string[]): Promise<IMessageDocument[]> {\r\n\tconst Message = mongoose.model<IMessageDocument, IMessageModel>(\"Message\");\r\n\tconst messages = await Message.find({ _id: { $in: ids } });\r\n\tconst groupedMessages = groupBy<IMessageDocument>(\r\n\t\tmessage => message.id,\r\n\t\tmessages\r\n\t);\r\n\treturn map(id => groupedMessages[id][0], ids);\r\n}\r\n\r\nexport default () => new Dataloader<string, IMessageDocument>(batchMessages);\r\n","import Dataloader from \"dataloader\";\r\nimport mongoose from \"mongoose\";\r\nimport { groupBy, map } from \"ramda\";\r\n\r\n//local\r\nimport { ISkillDocument, ISkillModel } from \"../entities/skill/model\";\r\n\r\nasync function batchSkills(ids: string[]): Promise<ISkillDocument[]> {\r\n\tconst Skill = mongoose.model<ISkillDocument, ISkillModel>(\"Skill\");\r\n\tconst skills = await Skill.find({ _id: { $in: ids } });\r\n\tconst groupedSkills = groupBy<ISkillDocument>(skill => skill.id, skills);\r\n\treturn map(id => groupedSkills[id][0], ids);\r\n}\r\n\r\nexport default () => new Dataloader<string, ISkillDocument>(batchSkills);\r\n","import Dataloader from \"dataloader\";\r\nimport mongoose from \"mongoose\";\r\nimport { groupBy, map } from \"ramda\";\r\n\r\n//local\r\nimport { IUserDocument, IUserModel } from \"../entities/user/model\";\r\n\r\nasync function batchUsers(ids: string[]): Promise<IUserDocument[]> {\r\n\tconst User = mongoose.model<IUserDocument, IUserModel>(\"User\");\r\n\tconst users = await User.find({ _id: { $in: ids } });\r\n\tconst groupedUsers = groupBy(user => user.id, users);\r\n\treturn map(id => groupedUsers[id][0], ids);\r\n}\r\n\r\nexport default () => new Dataloader<string, IUserDocument>(batchUsers);\r\n","export { default as ConversationTypeDef } from \"./typedef\";\r\nexport { default as ConversationResolvers } from \"./resolvers\";\r\n","import { IContext } from \"../../types\";\r\nimport { mapMessageIds } from \"../message/mapper\";\r\nimport { mapUserId, mapUserIds } from \"../user/mapper\";\r\nimport { IConversationDocument } from \"./model\";\r\nimport { IConversation } from \"./typedef\";\r\n\r\nexport const mapConversation = (\r\n\tconversation: IConversationDocument,\r\n\tcontext: IContext\r\n): IConversation => ({\r\n\tid: conversation.id,\r\n\tconversers: mapUserIds(\r\n\t\tconversation.conversers.map(id => id.toString()),\r\n\t\tcontext\r\n\t),\r\n\tmessages: mapMessageIds(\r\n\t\tconversation.messages.map(id => id.toString()),\r\n\t\tcontext\r\n\t),\r\n\tcreatedAt: conversation.createdAt,\r\n\tupdatedAt: conversation.updatedAt\r\n});\r\n\r\nexport const mapConversations = (\r\n\tconversations: IConversationDocument[],\r\n\tcontext: IContext\r\n) => conversations.map(conversation => mapConversation(conversation, context));\r\n","export { default as Conversation } from \"./model\";\r\nexport {\r\n\tIConversationBaseDocument,\r\n\tIConversationDocument,\r\n\tIConversationModel\r\n} from \"./types\";\r\n","import mongoose from \"mongoose\";\r\n\r\n//local\r\nimport { IConversationDocument, IConversationModel } from \"./types\";\r\n\r\nconst Schema = mongoose.Schema;\r\n\r\nconst ConversationSchema = new Schema<IConversationDocument>(\r\n\t{\r\n\t\tconversers: [\r\n\t\t\t{\r\n\t\t\t\ttype: Schema.Types.ObjectId,\r\n\t\t\t\tref: \"User\"\r\n\t\t\t}\r\n\t\t],\r\n\t\tmessages: [\r\n\t\t\t{\r\n\t\t\t\ttype: Schema.Types.ObjectId,\r\n\t\t\t\tref: \"Message\"\r\n\t\t\t}\r\n\t\t]\r\n\t},\r\n\t{ timestamps: true }\r\n);\r\n\r\nexport default mongoose.model<IConversationDocument, IConversationModel>(\r\n\t\"Conversation\",\r\n\tConversationSchema\r\n);\r\n","import QueryResolver from \"./query\";\r\n// import MutationResolver from \"./mutation\";\r\n// import SubscriptionResolver from \"./subscription\";\r\n\r\nexport default {\r\n\t...QueryResolver\r\n\t// ...MutationResolver\r\n\t// ...SubscriptionResolver\r\n};\r\n","import { IContext } from \"../../../types\";\r\nimport { mapConversation } from \"../mapper\";\r\nimport { Conversation } from \"../model\";\r\n\r\nexport default {\r\n\tQuery: {\r\n\t\tconversationsByUser: async (\r\n\t\t\tparent: any,\r\n\t\t\targs: { converserId: string },\r\n\t\t\tcontext: IContext,\r\n\t\t\tinfo: any\r\n\t\t) => {},\r\n\r\n\t\tconversations: async (\r\n\t\t\tparent: any,\r\n\t\t\targs: any,\r\n\t\t\tcontext: IContext,\r\n\t\t\tinfo: any\r\n\t\t) =>\r\n\t\t\t(await Conversation.find({})).map(conversation =>\r\n\t\t\t\tmapConversation(conversation, context)\r\n\t\t\t)\r\n\t}\r\n};\r\n","import { gql } from \"apollo-server-express\";\r\n\r\nexport default gql`\r\n\textend type Query {\r\n\t\tconversations: [Conversation!]\r\n\t\tconversationsByUser(converserId: ID!): [Conversation!]\r\n\t}\r\n\r\n\ttype Conversation {\r\n\t\tid: ID!\r\n\t\tconversers: [User!]\r\n\t\tmessages(cursor: ID, limit: Int = 50): [Message!]\r\n\t\tcreatedAt: Date!\r\n\t\tupdatedAt: Date!\r\n\t}\r\n`;\r\n\r\nexport { IConversation } from \"./types\";\r\n","import { SchemaDirectiveVisitor } from \"apollo-server-express\";\r\nimport { defaultFieldResolver, GraphQLField } from \"graphql\";\r\nimport { ensureSignedIn } from \"../../../helpers/functions/authentication\";\r\nimport { IContext } from \"../../../types\";\r\n\r\nexport default class AuthDirective extends SchemaDirectiveVisitor {\r\n\tpublic visitFieldDefinition(field: GraphQLField<any, any>) {\r\n\t\tconst { resolve = defaultFieldResolver } = field;\r\n\t\tfield.resolve = async function (...args) {\r\n\t\t\tconst [_, __, context] = args;\r\n\t\t\tensureSignedIn(context as IContext);\r\n\t\t\treturn resolve.apply(this, args);\r\n\t\t};\r\n\t}\r\n}\r\n","import { SchemaDirectiveVisitor } from \"apollo-server-express\";\r\nimport { defaultFieldResolver, GraphQLField } from \"graphql\";\r\nimport { ensureSignedOut } from \"../../../helpers/functions/authentication\";\r\nimport { IContext } from \"../../../types\";\r\n\r\nexport default class GuestDirective extends SchemaDirectiveVisitor {\r\n\tpublic visitFieldDefinition(field: GraphQLField<any, any>) {\r\n\t\tconst { resolve = defaultFieldResolver } = field;\r\n\t\tfield.resolve = async function (...args) {\r\n\t\t\tconst [_, __, context] = args;\r\n\t\t\tensureSignedOut(context as IContext);\r\n\t\t\treturn resolve.apply(this, args);\r\n\t\t};\r\n\t}\r\n}\r\n","export { default as AuthDirective } from \"./auth\";\r\nexport { default as GuestDirective } from \"./guest\";\r\nexport { default as PrivateDirective } from \"./private\";\r\n","import { SchemaDirectiveVisitor } from \"apollo-server-express\";\r\nimport { defaultFieldResolver, GraphQLField } from \"graphql\";\r\nimport { IContext } from \"../../../types\";\r\n\r\nexport default class PrivateDirective extends SchemaDirectiveVisitor {\r\n\tpublic visitFieldDefinition(field: GraphQLField<any, any>) {\r\n\t\tconst { resolve = defaultFieldResolver } = field;\r\n\t\tfield.resolve = async function (...arg) {\r\n\t\t\tconst [parent, args, context, info] = arg;\r\n\t\t\tif (\r\n\t\t\t\tparent.id !== (context as IContext).req.session.userId ||\r\n\t\t\t\t!(\"userId\" in (context as IContext).req.session)\r\n\t\t\t)\r\n\t\t\t\tparent[field.name] = null;\r\n\t\t\treturn resolve.apply(this, [parent, args, context, info]);\r\n\t\t};\r\n\t}\r\n}\r\n","import { AuthDirective, GuestDirective, PrivateDirective } from \"./definitions\";\r\n\r\nexport { default as DirectivesTypeDef } from \"./typedef\";\r\nexport default {\r\n\tauth: AuthDirective,\r\n\tguest: GuestDirective,\r\n\tprivate: PrivateDirective\r\n};\r\n","import { gql } from \"apollo-server-express\";\r\n\r\nexport default gql`\r\n\tdirective @guest on FIELD_DEFINITION\r\n\tdirective @auth on FIELD_DEFINITION\r\n\tdirective @private on FIELD_DEFINITION\r\n`;\r\n","export { default as CustomScalarTypeDef } from \"./typedef\";\r\nexport { default as CustomScalarResolvers } from \"./resolvers\";\r\n","import { GraphQLScalarType } from \"graphql\";\r\nimport { Kind } from \"graphql/language\";\r\n\r\nexport default {\r\n\tDate: new GraphQLScalarType({\r\n\t\tname: \"Date\",\r\n\t\tdescription: \"Date custom scalar type\",\r\n\t\tparseValue(value) {\r\n\t\t\treturn new Date(value); // value from the client\r\n\t\t},\r\n\t\tserialize(value) {\r\n\t\t\treturn value.getTime(); // value sent to the client\r\n\t\t},\r\n\t\tparseLiteral(ast) {\r\n\t\t\tif (ast.kind === Kind.INT) {\r\n\t\t\t\treturn parseInt(ast.value, 10); // ast value is always in string format\r\n\t\t\t}\r\n\t\t\treturn null;\r\n\t\t}\r\n\t})\r\n};\r\n","import DateResolver from \"./Date\";\r\n\r\nexport default { ...DateResolver };\r\n","import { gql } from \"apollo-server-express\";\r\nimport { DocumentNode } from \"graphql\";\r\n\r\nexport default gql`\r\n\tscalar Date\r\n` as DocumentNode;\r\n","export { default as TypeDefs } from \"./typedef\";\r\nexport { default as Resolvers } from \"./resolvers\";\r\n","export { default as MessageTypeDef } from \"./typedef\";\r\nexport { default as MessageResolvers } from \"./resolver\";\r\n","import { IContext } from \"../../types\";\r\nimport { mapUserId } from \"../user/mapper\";\r\nimport { IMessageDocument } from \"./model\";\r\nimport { IMessage } from \"./typedef\";\r\n\r\nexport const mapMessage = (\r\n\tmessage: IMessageDocument,\r\n\tcontext: IContext\r\n): IMessage => ({\r\n\tid: message.id,\r\n\tbody: message.body,\r\n\tread: message.read,\r\n\tcreatedAt: message.createdAt,\r\n\tupdatedAt: message.updatedAt,\r\n\tsender: mapUserId(message.sender.toString(), context),\r\n\treceiver: mapUserId(message.receiver.toString(), context)\r\n});\r\n\r\nexport const mapMessageIds = (\r\n\tids: string[],\r\n\tcontext: IContext\r\n): (() => Promise<IMessage[]>) => async () =>\r\n\t(await context.dataloaders.messageLoader.loadMany(ids)).map(message =>\r\n\t\tmapMessage(message as IMessageDocument, context)\r\n\t);\r\n","export { default as Message } from \"./model\";\r\n\r\nexport { IMessageBaseDocument, IMessageDocument, IMessageModel } from \"./types\";\r\n","import mongoose from \"mongoose\";\r\n\r\n//local\r\nimport { IMessageDocument, IMessageModel } from \"./types\";\r\n\r\nconst Schema = mongoose.Schema;\r\n\r\nconst MessageSchema = new Schema<IMessageDocument>(\r\n\t{\r\n\t\tsender: { type: Schema.Types.ObjectId, ref: \"User\" },\r\n\t\treceiver: { type: Schema.Types.ObjectId, ref: \"User\" },\r\n\t\tbody: { type: String, required: true },\r\n\t\tread: { type: Boolean, required: true, default: false }\r\n\t},\r\n\t{ timestamps: true }\r\n);\r\n\r\nexport default mongoose.model<IMessageDocument, IMessageModel>(\r\n\t\"Message\",\r\n\tMessageSchema\r\n);\r\n","import QueryResolver from \"./query\";\r\nimport MutationResolver from \"./mutation\";\r\n// import SubscriptionResolver from \"./subscription\";\r\n\r\nexport default {\r\n\t...QueryResolver,\r\n\t...MutationResolver\r\n\t// ...SubscriptionResolver\r\n};\r\n","import { Schema } from \"mongoose\";\r\nimport { sendVerificationEmail } from \"../../../helpers/functions/sendVerificationEmail\";\r\nimport { IContext } from \"../../../types\";\r\nimport { Conversation, IConversationDocument } from \"../../conversation/model\";\r\nimport { User } from \"../../user/model\";\r\nimport { mapMessage } from \"../mapper\";\r\nimport { IMessageDocument, Message } from \"../model\";\r\nimport { IStrictMessageInput } from \"../typedef\";\r\n\r\nexport default {\r\n\tMutation: {\r\n\t\tcreateMessage: async (\r\n\t\t\tparent: any,\r\n\t\t\targs: { input: IStrictMessageInput },\r\n\t\t\tcontext: IContext,\r\n\t\t\tinfo: any\r\n\t\t) => {\r\n\t\t\tconst message = await Message.create<Partial<IMessageDocument>>({\r\n\t\t\t\tsender: args.input.senderId,\r\n\t\t\t\treceiver: args.input.receiverId,\r\n\t\t\t\tbody: args.input.body\r\n\t\t\t});\r\n\r\n\t\t\tconst conversation = await Conversation.findOne({\r\n\t\t\t\tconversers: { $all: [args.input.senderId, args.input.receiverId] }\r\n\t\t\t});\r\n\r\n\t\t\tif (!conversation) {\r\n\t\t\t\tconst conversation = await Conversation.create<\r\n\t\t\t\t\tPartial<IConversationDocument>\r\n\t\t\t\t>({\r\n\t\t\t\t\tconversers: [args.input.senderId, args.input.receiverId]\r\n\t\t\t\t});\r\n\r\n\t\t\t\tawait conversation.updateOne({\r\n\t\t\t\t\tmessages: [message.id]\r\n\t\t\t\t});\r\n\r\n\t\t\t\tawait User.findByIdAndUpdate(args.input.senderId, {\r\n\t\t\t\t\t$push: { conversations: conversation.id }\r\n\t\t\t\t});\r\n\r\n\t\t\t\tawait User.findByIdAndUpdate(args.input.receiverId, {\r\n\t\t\t\t\t$push: { conversations: conversation.id }\r\n\t\t\t\t});\r\n\r\n\t\t\t\treturn mapMessage(message, context);\r\n\t\t\t}\r\n\r\n\t\t\tawait conversation.updateOne({\r\n\t\t\t\t$push: {\r\n\t\t\t\t\tmessages: {\r\n\t\t\t\t\t\t$each: [message.id],\r\n\t\t\t\t\t\t$position: 0\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\t\treturn mapMessage(message, context);\r\n\t\t},\r\n\r\n\t\teditMessage: async (\r\n\t\t\tparent: any,\r\n\t\t\targs: { body: string; messageId: string },\r\n\t\t\tcontext: IContext,\r\n\t\t\tinfo: any\r\n\t\t) => {\r\n\t\t\tconst message = await Message.findByIdAndUpdate(\r\n\t\t\t\targs.messageId,\r\n\t\t\t\t{ body: args.body },\r\n\t\t\t\t{ new: true }\r\n\t\t\t);\r\n\r\n\t\t\treturn mapMessage(message, context);\r\n\t\t},\r\n\r\n\t\tremoveMessage: async (\r\n\t\t\tparent: any,\r\n\t\t\targs: { messageId: string },\r\n\t\t\tcontext: IContext,\r\n\t\t\tinfo: any\r\n\t\t) => {\r\n\t\t\tconst result = await Message.findByIdAndDelete(args.messageId);\r\n\t\t\tif (result) return true;\r\n\t\t\treturn false;\r\n\t\t}\r\n\t}\r\n};\r\n","import { IContext } from \"../../../types\";\r\nimport { mapMessage } from \"../mapper\";\r\nimport { Message } from \"../model\";\r\n\r\nexport default {\r\n\tQuery: {\r\n\t\tmessages: async (parent: any, args: any, context: IContext, info: any) =>\r\n\t\t\t(await Message.find({})).map(message => mapMessage(message, context))\r\n\t}\r\n};\r\n","import { gql } from \"apollo-server-express\";\r\n\r\nexport default gql`\r\n\tinput StrictMessageInput {\r\n\t\tsenderId: ID!\r\n\t\treceiverId: ID!\r\n\t\tbody: String!\r\n\t}\r\n\r\n\textend type Query {\r\n\t\tmessages: [Message!]\r\n\t}\r\n\r\n\textend type Mutation {\r\n\t\tcreateMessage(input: StrictMessageInput!): Message!\r\n\t\tremoveMessage(messageId: ID!): Boolean!\r\n\t\teditMessage(body: String!, messageId: ID!): Message!\r\n\t}\r\n\r\n\ttype Message {\r\n\t\tid: ID!\r\n\t\tsender: User!\r\n\t\treceiver: User!\r\n\t\tbody: String!\r\n\t\tread: Boolean!\r\n\t\tcreatedAt: Date!\r\n\t\tupdatedAt: Date!\r\n\t}\r\n`;\r\n\r\nexport { IMessage, IStrictMessageInput } from \"./types\";\r\n","export { default as ProjectRequestResolvers } from \"./resolvers\";\r\nexport { default as ProjectRequestTypeDef } from \"./typedef\";\r\n","import { IContext } from \"../../types\";\r\nimport { Project } from \"../project/model\";\r\nimport { mapUserId } from \"../user/mapper\";\r\nimport { IProjectRequestDocument } from \"./model/types\";\r\n\r\nexport const mapProjectRequest = (\r\n\tprojectRequest: IProjectRequestDocument,\r\n\tcontext: IContext\r\n) => ({\r\n\tid: projectRequest.id,\r\n\tfrom: mapUserId(projectRequest.from, context),\r\n\tto: async () => Project.findById(projectRequest.to),\r\n\tmessage: projectRequest.message,\r\n\tstatus: projectRequest.status,\r\n\tcreatedAt: projectRequest.createdAt,\r\n\tupdatedAt: projectRequest.updatedAt\r\n});\r\n","export { default as ProjectRequest } from \"./model\";\r\n","import mongoose from \"mongoose\";\r\n\r\n//local\r\nimport { IProjectRequestDocument, IProjectRequestModel } from \"./types\";\r\n\r\nconst Schema = mongoose.Schema;\r\n\r\nconst ProjectRequestSchema = new Schema(\r\n\t{\r\n\t\tfrom: { type: Schema.Types.ObjectId, ref: \"User\" },\r\n\t\tto: { type: Schema.Types.ObjectId, ref: \"Project\" },\r\n\t\tmessage: String,\r\n\t\tstatus: {\r\n\t\t\ttype: String,\r\n\t\t\tenum: [\"PENDING\", \"ACCEPTED\", \"DENIED\"],\r\n\t\t\trequired: true,\r\n\t\t\tdefault: \"PENDING\"\r\n\t\t}\r\n\t},\r\n\t{ timestamps: true }\r\n);\r\n\r\nexport default mongoose.model<IProjectRequestDocument, IProjectRequestModel>(\r\n\t\"ProjectRequest\",\r\n\tProjectRequestSchema\r\n);\r\n","import { Document, Model } from \"mongoose\";\r\n\r\nexport enum ProjectRequestStatusEnum {\r\n\tPENDING = \"PENDING\",\r\n\tACCEPTED = \"ACCEPTED\",\r\n\tDENIED = \"DENIED\"\r\n}\r\n\r\nexport interface IProjectRequestBaseDocument extends Document {\r\n\tfrom: string;\r\n\tto: string;\r\n\tmessage: string;\r\n\tstatus: ProjectRequestStatusEnum;\r\n\tcreatedAt: Date;\r\n\tupdatedAt: Date;\r\n}\r\n\r\nexport interface IProjectRequestDocument extends IProjectRequestBaseDocument {}\r\n\r\nexport interface IProjectRequestModel extends Model<IProjectRequestDocument> {}\r\n","import QueryResolver from \"./query\";\r\nimport MutationResolver from \"./mutation\";\r\n// import SubscriptionResolver from \"./subscription\";\r\n\r\nexport default { ...MutationResolver, ...QueryResolver };\r\n","//local\r\nimport { ApolloError, AuthenticationError } from \"apollo-server-express\";\r\nimport { IContext } from \"../../../types\";\r\nimport { Project } from \"../../project/model\";\r\nimport { mapProjectRequest } from \"../mapper\";\r\nimport { ProjectRequest } from \"../model\";\r\nimport {\r\n\tIProjectRequestDocument,\r\n\tProjectRequestStatusEnum\r\n} from \"../model/types\";\r\n\r\nexport default {\r\n\tMutation: {\r\n\t\ttoggleRequestProject: async (\r\n\t\t\tparent: any,\r\n\t\t\targs: { message: string; projectId: string },\r\n\t\t\tcontext: IContext,\r\n\t\t\tinfo: any\r\n\t\t) => {\r\n\t\t\tconst oldRequest = await ProjectRequest.findOne({\r\n\t\t\t\tfrom: context.req.session.userId,\r\n\t\t\t\tto: args.projectId\r\n\t\t\t});\r\n\r\n\t\t\tif (oldRequest) {\r\n\t\t\t\tawait oldRequest.deleteOne((err, raw) => {\r\n\t\t\t\t\tif (err) throw new ApolloError(err);\r\n\t\t\t\t});\r\n\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\r\n\t\t\tconst project = await Project.findById(args.projectId);\r\n\r\n\t\t\tif (\r\n\t\t\t\tproject.details.creator.toString() ===\r\n\t\t\t\tcontext.req.session.userId.toString()\r\n\t\t\t)\r\n\t\t\t\tthrow new ApolloError(\"You cannot request your own project.\");\r\n\r\n\t\t\tawait ProjectRequest.create<Partial<IProjectRequestDocument>>({\r\n\t\t\t\tfrom: context.req.session.userId,\r\n\t\t\t\tto: args.projectId,\r\n\t\t\t\tstatus: ProjectRequestStatusEnum.PENDING,\r\n\t\t\t\tmessage: args.message.length === 0 ? null : args.message\r\n\t\t\t});\r\n\r\n\t\t\treturn true;\r\n\t\t},\r\n\r\n\t\tacceptProjectRequest: async (\r\n\t\t\tparent: any,\r\n\t\t\targs: { projectRequestId: string },\r\n\t\t\tcontext: IContext,\r\n\t\t\tinfo: any\r\n\t\t) => {\r\n\t\t\tconst projectRequest = await ProjectRequest.findById(\r\n\t\t\t\targs.projectRequestId\r\n\t\t\t);\r\n\t\t\tconst project = await Project.findById(projectRequest.to);\r\n\r\n\t\t\tif (\r\n\t\t\t\tproject.details.creator.toString() !==\r\n\t\t\t\tcontext.req.session.userId.toString()\r\n\t\t\t)\r\n\t\t\t\tthrow new AuthenticationError(\r\n\t\t\t\t\t\"Your are not allowed to accept this request.\"\r\n\t\t\t\t);\r\n\r\n\t\t\tif (projectRequest.status === ProjectRequestStatusEnum.ACCEPTED)\r\n\t\t\t\tthrow new ApolloError(\"Request is already accepted.\");\r\n\r\n\t\t\tconst result = await ProjectRequest.findByIdAndUpdate(\r\n\t\t\t\tprojectRequest.id,\r\n\t\t\t\t{\r\n\t\t\t\t\tstatus: ProjectRequestStatusEnum.ACCEPTED\r\n\t\t\t\t},\r\n\t\t\t\t{ new: true }\r\n\t\t\t);\r\n\r\n\t\t\tawait project.updateOne({ $push: { \"work.team\": result.from } });\r\n\r\n\t\t\treturn mapProjectRequest(result, context);\r\n\t\t}\r\n\t}\r\n};\r\n","import { IContext } from \"../../../types\";\r\nimport { mapProjectRequest } from \"../mapper\";\r\nimport { ProjectRequest } from \"../model\";\r\n\r\nexport default {\r\n\tQuery: {\r\n\t\tprojectRequests: async (\r\n\t\t\tparent: any,\r\n\t\t\targs: any,\r\n\t\t\tcontext: IContext,\r\n\t\t\tinfo: any\r\n\t\t) =>\r\n\t\t\t(await ProjectRequest.find({})).map(projectRequest =>\r\n\t\t\t\tmapProjectRequest(projectRequest, context)\r\n\t\t\t)\r\n\t}\r\n};\r\n","import { gql } from \"apollo-server-express\";\r\n\r\nexport default gql`\r\n\tenum RequestStatusEnum {\r\n\t\tPENDING\r\n\t\tACCEPTED\r\n\t\tDENIED\r\n\t}\r\n\r\n\ttype ProjectRequest {\r\n\t\tid: ID!\r\n\t\tfrom: User!\r\n\t\tto: Project!\r\n\t\tmessage: String\r\n\t\tstatus: RequestStatusEnum!\r\n\t\tcreatedAt: Date!\r\n\t\tupdatedAt: Date!\r\n\t}\r\n\r\n\textend type Query {\r\n\t\tprojectRequests: [ProjectRequest!]\r\n\t}\r\n\r\n\textend type Mutation {\r\n\t\ttoggleRequestProject(message: String!, projectId: ID!): Boolean! @auth\r\n\t\tacceptProjectRequest(projectRequestId: ID!): ProjectRequest! @auth\r\n\t}\r\n`;\r\n\r\nexport { IProjectRequest } from \"./types\";\r\n","export { default as ProjectResolvers } from \"./resolvers\";\r\nexport { default as ProjectTypeDef } from \"./typedef\";\r\n","import { IContext } from \"../../types\";\r\nimport { mapProjectRequest } from \"../projectRequest/mapper\";\r\nimport { ProjectRequest } from \"../projectRequest/model\";\r\nimport { mapSkillIds } from \"../skill/mapper\";\r\nimport { mapUserId, mapUserIds } from \"../user/mapper\";\r\nimport { IProjectDocument, Project } from \"./model\";\r\nimport { IProject } from \"./typedef/types\";\r\n\r\nexport const mapProject = (\r\n\tproject: IProjectDocument,\r\n\tcontext: IContext\r\n): IProject => ({\r\n\tid: project.id,\r\n\tdetails: {\r\n\t\t...project.details,\r\n\t\tskillSet: mapSkillIds(project.details.skillSet, context),\r\n\t\tcreator: mapUserId(project.details.creator, context),\r\n\t\tstars: mapUserIds(project.details.stars, context),\r\n\t\trequests: async () =>\r\n\t\t\t(await ProjectRequest.find({ to: project.id })).map(request =>\r\n\t\t\t\tmapProjectRequest(request, context)\r\n\t\t\t) as any\r\n\t},\r\n\tisStarred: project.details.stars.includes(context.req.session.userId),\r\n\tisRequested: async () =>\r\n\t\t(await ProjectRequest.findOne({\r\n\t\t\tfrom: context.req.session.userId,\r\n\t\t\tto: project.id\r\n\t\t})) !== null,\r\n\tstate: project.state,\r\n\twork: {\r\n\t\tteam: mapUserIds(project.work.team, context)\r\n\t},\r\n\tcreatedAt: project.createdAt,\r\n\tupdatedAt: project.updatedAt\r\n});\r\n","export { default as Project } from \"./model\";\r\nexport { IProjectDocument, IProjectModel } from \"./types\";\r\n","import mongoose from \"mongoose\";\r\nimport { IProjectDocument, IProjectModel } from \"./types\";\r\n\r\nconst Schema = mongoose.Schema;\r\n\r\nconst ProjectSchema = new Schema<IProjectDocument>(\r\n\t{\r\n\t\tdetails: {\r\n\t\t\ttitle: { type: String, required: true },\r\n\t\t\tdescription: { type: String, required: true },\r\n\t\t\tstartingOn: { type: Date, required: true },\r\n\t\t\tduration: { type: Number, required: true },\r\n\t\t\tmaxTeamMembers: { type: Number, required: true },\r\n\t\t\tcreator: { type: Schema.Types.ObjectId, ref: \"User\" },\r\n\t\t\tskillSet: [{ type: Schema.Types.ObjectId, ref: \"Skill\" }],\r\n\t\t\tstars: [{ type: Schema.Types.ObjectId, ref: \"User\" }]\r\n\t\t},\r\n\t\twork: {\r\n\t\t\tteam: [{ type: Schema.Types.ObjectId, ref: \"User\" }]\r\n\t\t},\r\n\t\tstate: {\r\n\t\t\ttype: String,\r\n\t\t\tenum: [\"OPEN\", \"CLOSED\", \"STARTED\", \"ENDED\"],\r\n\t\t\tdefault: \"OPEN\"\r\n\t\t}\r\n\t},\r\n\t{ timestamps: true }\r\n);\r\n\r\nexport default mongoose.model<IProjectDocument, IProjectModel>(\r\n\t\"Project\",\r\n\tProjectSchema\r\n);\r\n","import QueryResolver from \"./query\";\r\nimport MutationResolver from \"./mutation\";\r\n// import SubscriptionResolver from \"./subscription\";\r\n\r\nexport default { ...MutationResolver, ...QueryResolver };\r\n","import { ApolloError } from \"apollo-server-express\";\r\nimport { ProjectTypeDef } from \"..\";\r\nimport { attemptSignIn } from \"../../../helpers/functions/authentication\";\r\nimport { IContext } from \"../../../types\";\r\nimport { mapProject } from \"../mapper\";\r\nimport { IProjectDocument, Project } from \"../model\";\r\nimport { ILooseProjectInput, IStrictProjectInput } from \"../typedef/types\";\r\n\r\ntype DeepPartial<T> = {\r\n\t[K in keyof T]?: Partial<T[K]>;\r\n};\r\n\r\nexport default {\r\n\tMutation: {\r\n\t\tcreateProject: async (\r\n\t\t\tparent: any,\r\n\t\t\targs: { input: IStrictProjectInput },\r\n\t\t\tcontext: IContext,\r\n\t\t\tinfo: any\r\n\t\t) => {\r\n\t\t\tconst skillSet = args.input.details.skillSet as any;\r\n\t\t\tconst input = {\r\n\t\t\t\tdetails: {\r\n\t\t\t\t\t...args.input.details,\r\n\t\t\t\t\tskillSet: skillSet.map(obj => obj.skillId),\r\n\t\t\t\t\tcreator: context.req.session.userId\r\n\t\t\t\t}\r\n\t\t\t};\r\n\r\n\t\t\tconst project = await Project.create<DeepPartial<IProjectDocument>>(\r\n\t\t\t\tinput\r\n\t\t\t);\r\n\r\n\t\t\treturn mapProject(project, context);\r\n\t\t},\r\n\r\n\t\teditProject: async (\r\n\t\t\tparent: any,\r\n\t\t\targs: { input: ILooseProjectInput },\r\n\t\t\tcontext: IContext,\r\n\t\t\tinfo: any\r\n\t\t) => {\r\n\t\t\tconst project = await Project.findById(args.input.projectId);\r\n\r\n\t\t\tif (!project) throw new ApolloError(\"Project not found.\");\r\n\r\n\t\t\tif (\r\n\t\t\t\tproject.details.creator.toString() !==\r\n\t\t\t\tcontext.req.session.userId.toString()\r\n\t\t\t)\r\n\t\t\t\tthrow new ApolloError(\"You cannot edit this project.\");\r\n\r\n\t\t\tlet skillSet = project.details.skillSet;\r\n\r\n\t\t\tif (\"skillSet\" in args.input.details) {\r\n\t\t\t\tconst set = args.input.details.skillSet as any;\r\n\t\t\t\tskillSet = set.map(obj => obj.skillId);\r\n\t\t\t}\r\n\r\n\t\t\tconst doc = {\r\n\t\t\t\tdetails:\r\n\t\t\t\t\t\"details\" in args.input\r\n\t\t\t\t\t\t? {\r\n\t\t\t\t\t\t\t\t...project.toObject().details,\r\n\t\t\t\t\t\t\t\t...args.input.details,\r\n\t\t\t\t\t\t\t\tskillSet\r\n\t\t\t\t\t\t  }\r\n\t\t\t\t\t\t: project.toObject().details\r\n\t\t\t};\r\n\r\n\t\t\tawait project.updateOne(doc, (err, raw) => {\r\n\t\t\t\tif (err) throw new ApolloError(err);\r\n\t\t\t});\r\n\r\n\t\t\treturn mapProject(Object.assign(project, doc), context);\r\n\t\t},\r\n\r\n\t\ttoggleStarProject: async (\r\n\t\t\tparent: any,\r\n\t\t\targs: { projectId: string },\r\n\t\t\tcontext: IContext,\r\n\t\t\tinfo: any\r\n\t\t) => {\r\n\t\t\tconst project = await Project.findById(args.projectId);\r\n\r\n\t\t\tconst isStarred = project.details.stars.includes(\r\n\t\t\t\tcontext.req.session.userId\r\n\t\t\t);\r\n\r\n\t\t\tif (isStarred)\r\n\t\t\t\tawait project.updateOne({\r\n\t\t\t\t\t$pull: { \"details.stars\": context.req.session.userId }\r\n\t\t\t\t});\r\n\t\t\telse\r\n\t\t\t\tawait project.updateOne({\r\n\t\t\t\t\t$push: { \"details.stars\": context.req.session.userId }\r\n\t\t\t\t});\r\n\r\n\t\t\treturn !isStarred;\r\n\t\t}\r\n\t}\r\n};\r\n","import { IContext } from \"../../../types\";\r\nimport { User } from \"../../user/model\";\r\nimport { mapProject } from \"../mapper\";\r\nimport { Project } from \"../model\";\r\n\r\nexport default {\r\n\tQuery: {\r\n\t\tprojects: async (parent: any, args: any, context: IContext, info: any) =>\r\n\t\t\t(await Project.find({})).map(project => mapProject(project, context)),\r\n\t\tprojectsByUserInterests: async (\r\n\t\t\tparent: any,\r\n\t\t\targs: { userId: string },\r\n\t\t\tcontext: IContext,\r\n\t\t\tinfo: any\r\n\t\t) => {\r\n\t\t\tconst user = await User.findById(args.userId);\r\n\t\t\tconst skillIds = user.personalInfo.interests;\r\n\t\t\tconsole.log(skillIds);\r\n\t\t\treturn (\r\n\t\t\t\tawait Project.find({ \"details.skillSet\": { $in: skillIds } })\r\n\t\t\t).map(project => mapProject(project, context));\r\n\t\t},\r\n\t\tprojectById: async (\r\n\t\t\tparent: any,\r\n\t\t\targs: { projectId: string },\r\n\t\t\tcontext: IContext,\r\n\t\t\tinfo: any\r\n\t\t) => mapProject(await Project.findById(args.projectId), context)\r\n\t}\r\n};\r\n","import { gql } from \"apollo-server-express\";\r\n\r\nexport default gql`\r\n\tinput StrictProjectDetailsInput {\r\n\t\ttitle: String!\r\n\t\tdescription: String!\r\n\t\tstartingOn: Date!\r\n\t\tmaxTeamMembers: Int!\r\n\t\tduration: Int!\r\n\t\tskillSet: [SkillIdInput!]\r\n\t}\r\n\r\n\tinput StrictProjectInput {\r\n\t\tdetails: StrictProjectDetailsInput!\r\n\t}\r\n\r\n\tinput LooseProjectDetailsInput {\r\n\t\ttitle: String\r\n\t\tdescription: String\r\n\t\tstartingOn: Date\r\n\t\tmaxTeamMembers: Int\r\n\t\tduration: Int\r\n\t\tskillSet: [SkillIdInput!]\r\n\t}\r\n\r\n\tinput LooseProjectInput {\r\n\t\tprojectId: ID!\r\n\t\tdetails: LooseProjectDetailsInput\r\n\t}\r\n\r\n\tenum ProjectStateEnum {\r\n\t\tOPEN\r\n\t\tCLOSED\r\n\t\tSTARTED\r\n\t\tENDED\r\n\t}\r\n\r\n\ttype ProjectDetails {\r\n\t\ttitle: String!\r\n\t\tdescription: String!\r\n\t\tstartingOn: Date!\r\n\t\tmaxTeamMembers: Int!\r\n\t\tduration: Int!\r\n\t\tcreator: User!\r\n\t\tskillSet: [Skill!]\r\n\t\tstars: [User!]\r\n\t\trequests: [ProjectRequest!]\r\n\t}\r\n\r\n\ttype ProjectWork {\r\n\t\tteam: [User!]\r\n\t}\r\n\r\n\ttype Project {\r\n\t\tid: ID!\r\n\t\tdetails: ProjectDetails!\r\n\t\tstate: ProjectStateEnum!\r\n\t\twork: ProjectWork!\r\n\t\tisStarred: Boolean!\r\n\t\tisRequested: Boolean!\r\n\t\tcreatedAt: Date!\r\n\t\tupdatedAt: Date!\r\n\t}\r\n\r\n\textend type Query {\r\n\t\tprojects: [Project!]\r\n\t\tprojectsByUserInterests(userId: ID!): [Project!]\r\n\t\tprojectById(projectId: ID!): Project!\r\n\t}\r\n\r\n\textend type Mutation {\r\n\t\tcreateProject(input: StrictProjectInput!): Project! @auth\r\n\t\teditProject(input: LooseProjectInput!): Project! @auth\r\n\t\ttoggleStarProject(projectId: ID!): Boolean! @auth\r\n\t}\r\n`;\r\n\r\nexport { ILooseProjectInput, IProject, IStrictProjectInput } from \"./types\";\r\n","import { UserResolvers } from \"./user\";\r\nimport { SkillResolvers } from \"./skill\";\r\nimport { MessageResolvers } from \"./message\";\r\nimport { ProjectResolvers } from \"./project\";\r\nimport { ProjectRequestResolvers } from \"./projectRequest\";\r\nimport { ConversationResolvers } from \"./conversation\";\r\nimport { CustomScalarResolvers } from \"./customScalars\";\r\n\r\nexport default [\r\n\tUserResolvers,\r\n\tSkillResolvers,\r\n\tCustomScalarResolvers,\r\n\tMessageResolvers,\r\n\tProjectResolvers,\r\n\tProjectRequestResolvers,\r\n\tConversationResolvers\r\n];\r\n","export { default as RootTypeDef } from \"./typedef\";\r\n","import { gql } from \"apollo-server-express\";\r\n\r\nexport default gql`\r\n\ttype Query {\r\n\t\t_: String\r\n\t}\r\n\r\n\ttype Mutation {\r\n\t\t_: String\r\n\t}\r\n\r\n\ttype Subscription {\r\n\t\t_: String\r\n\t}\r\n`;\r\n","export { default as SkillResolvers } from \"./resolvers\";\r\nexport { default as SkillTypeDef } from \"./typedef\";\r\n","import { IContext } from \"../../types\";\r\nimport { ISkillDocument } from \"./model\";\r\nimport { ISkill } from \"./typedef\";\r\n\r\nexport const mapSkill = (skill: ISkillDocument): ISkill => {\r\n\treturn {\r\n\t\tid: skill.id,\r\n\t\tname: skill.name,\r\n\t\tcolor: skill.color,\r\n\t\tdescription: skill.description\r\n\t};\r\n};\r\n\r\nexport const mapSkillIds = (\r\n\tids: string[],\r\n\tcontext: IContext\r\n): (() => Promise<ISkill[]>) => async () =>\r\n\t(await context.dataloaders.skillLoader.loadMany(ids)).map(skill =>\r\n\t\tmapSkill(skill as ISkillDocument)\r\n\t);\r\n","export { default as Skill } from \"./model\";\r\nexport { ISkillDocument, ISkillModel } from \"./types\";\r\n","import mongoose from \"mongoose\";\r\n\r\n//local\r\nimport { ISkillDocument, ISkillModel } from \"./types\";\r\n\r\nconst Schema = mongoose.Schema;\r\n\r\nconst SkillSchema = new Schema({\r\n\tname: {\r\n\t\ttype: String,\r\n\t\trequired: true\r\n\t},\r\n\tdescription: {\r\n\t\ttype: String,\r\n\t\trequired: true\r\n\t},\r\n\tcolor: {\r\n\t\ttype: String,\r\n\t\trequired: true\r\n\t}\r\n});\r\n\r\nexport default mongoose.model<ISkillDocument, ISkillModel>(\r\n\t\"Skill\",\r\n\tSkillSchema\r\n);\r\n","import QueryResolver from \"./query\";\r\nimport MutationResolver from \"./mutation\";\r\n\r\nexport default {\r\n\t...QueryResolver,\r\n\t...MutationResolver\r\n};\r\n","import { Skill } from \"../model\";\r\nimport { IStrictSkillInput } from \"../typedef\";\r\n\r\nexport default {\r\n\tMutation: {\r\n\t\tcreateSkill: (\r\n\t\t\tparent: any,\r\n\t\t\targs: { input: IStrictSkillInput },\r\n\t\t\tcontext: any,\r\n\t\t\tinfo: any\r\n\t\t) => {\r\n\t\t\treturn Skill.create(args.input);\r\n\t\t}\r\n\t}\r\n};\r\n","import { IContext } from \"../../../types\";\r\nimport { mapSkill } from \"../mapper\";\r\nimport { Skill } from \"../model\";\r\n\r\nexport default {\r\n\tQuery: {\r\n\t\tskills: async (parent: any, args: any, context: IContext, info: any) =>\r\n\t\t\t(await Skill.find({})).map(skill => mapSkill(skill))\r\n\t}\r\n};\r\n","import { gql } from \"apollo-server-express\";\r\n\r\nexport default gql`\r\n\tinput SkillIdInput {\r\n\t\tskillId: ID!\r\n\t}\r\n\r\n\tinput StrictSkillInput {\r\n\t\tname: String!\r\n\t\tdescription: String!\r\n\t\tcolor: String!\r\n\t}\r\n\r\n\tinput LooseSkillInput {\r\n\t\tname: String\r\n\t\tdescription: String\r\n\t\tcolor: String\r\n\t}\r\n\r\n\textend type Query {\r\n\t\tskills: [Skill!]\r\n\t}\r\n\r\n\textend type Mutation {\r\n\t\tcreateSkill(input: StrictSkillInput!): Skill! @auth\r\n\t}\r\n\r\n\ttype Skill {\r\n\t\tid: ID!\r\n\t\tname: String!\r\n\t\tdescription: String!\r\n\t\tcolor: String!\r\n\t}\r\n`;\r\n\r\nexport {\r\n\tISkill,\r\n\tISkillIdInput,\r\n\tIStrictSkillInput,\r\n\tILooseSkillInput\r\n} from \"./types\";\r\n","import { RootTypeDef } from \"./root\";\r\nimport { UserTypeDef } from \"./user\";\r\nimport { ConversationTypeDef } from \"./conversation\";\r\nimport { MessageTypeDef } from \"./message\";\r\nimport { SkillTypeDef } from \"./skill\";\r\nimport { ProjectTypeDef } from \"./project\";\r\nimport { ProjectRequestTypeDef } from \"./projectRequest\";\r\nimport { CustomScalarTypeDef } from \"./customScalars\";\r\nimport { DirectivesTypeDef } from \"./customDirectives\";\r\n\r\nexport default [\r\n\tCustomScalarTypeDef,\r\n\tDirectivesTypeDef,\r\n\tRootTypeDef,\r\n\tUserTypeDef,\r\n\tSkillTypeDef,\r\n\tMessageTypeDef,\r\n\tProjectTypeDef,\r\n\tProjectRequestTypeDef,\r\n\tConversationTypeDef\r\n];\r\n","export { default as UserResolvers } from \"./resolvers\";\r\nexport { default as UserTypeDef } from \"./typedef\";\r\n","//local\r\nimport { IContext } from \"../../types\";\r\nimport { mapSkillIds } from \"../skill/mapper\";\r\nimport { IUserDocument } from \"./Model\";\r\nimport { IUser } from \"./typedef\";\r\n\r\nexport const mapUser = (user: IUserDocument, context: IContext): IUser => {\r\n\treturn {\r\n\t\tid: user.id,\r\n\t\taccountInfo: {\r\n\t\t\t...user.accountInfo\r\n\t\t},\r\n\t\tpersonalInfo: {\r\n\t\t\t...user.personalInfo,\r\n\t\t\tinterests: mapSkillIds(user.personalInfo.interests, context)\r\n\t\t},\r\n\t\tstatusInfo: user.statusInfo\r\n\t};\r\n};\r\n\r\nexport const mapUserId = (id: string, context: IContext) => async () =>\r\n\tmapUser(await context.dataloaders.userLoader.load(id), context);\r\n\r\nexport const mapUserIds = (\r\n\tids: string[],\r\n\tcontext: IContext\r\n): (() => Promise<IUser[]>) => async () =>\r\n\t(await context.dataloaders.userLoader.loadMany(ids)).map(user =>\r\n\t\tmapUser(user as IUserDocument, context)\r\n\t);\r\n","export { default as User } from \"./model\";\r\nexport { IUserDocument, IUserModel, IUserBaseDocument } from \"./types\";\r\n","import mongoose from \"mongoose\";\r\nimport { compare, hash } from \"bcrypt\";\r\n\r\n// local\r\nimport { IUserDocument, IUserModel } from \"./types\";\r\n\r\nconst Schema = mongoose.Schema;\r\n\r\nconst UserSchema = new Schema<IUserDocument>(\r\n\t{\r\n\t\taccountInfo: {\r\n\t\t\temail: { type: String, required: true },\r\n\t\t\tpassword: { type: String, required: true },\r\n\t\t\tname: { type: String, required: true },\r\n\t\t\thandler: { type: String, required: true },\r\n\t\t\tverifiedEmail: { type: Boolean, default: false }\r\n\t\t},\r\n\t\tpersonalInfo: {\r\n\t\t\tbio: { type: String, default: null },\r\n\t\t\tbirthDate: { type: Date, default: null },\r\n\t\t\tinterests: [{ type: Schema.Types.ObjectId, ref: \"Skill\" }]\r\n\t\t},\r\n\t\tstatusInfo: {\r\n\t\t\tisOnline: { type: Boolean, required: true, default: false },\r\n\t\t\tlastActive: { type: Date, default: null }\r\n\t\t},\r\n\t\tconversations: [{ type: Schema.Types.ObjectId, ref: \"Conversation\" }]\r\n\t},\r\n\t{ timestamps: true, versionKey: \"schemaVersion\" }\r\n);\r\n\r\n// hooks\r\nUserSchema.pre<IUserDocument>(\"save\", async function () {\r\n\tif (this.isModified(\"accountInfo.password\")) {\r\n\t\tthis.accountInfo.password = await hash(this.accountInfo.password, 12);\r\n\t}\r\n});\r\n\r\n// instance methods\r\nUserSchema.methods.comparePassword = function (password: string) {\r\n\treturn compare(password, this.accountInfo.password);\r\n};\r\n\r\n// validators\r\nUserSchema.path(\"accountInfo.handler\").validate(async function (value: string) {\r\n\tconst User = mongoose.model<IUserDocument, IUserModel>(\"User\");\r\n\treturn (await User.findOne({ \"accountInfo.handler\": value })) === null;\r\n}, \"Handler `{VALUE}` already exist\");\r\n\r\nUserSchema.path(\"accountInfo.email\").validate(async function (value) {\r\n\tconst User = mongoose.model<IUserDocument, IUserModel>(\"User\");\r\n\treturn (await User.findOne({ \"accountInfo.email\": value })) === null;\r\n}, \"Email `{VALUE}` already registered.\");\r\n\r\nexport default mongoose.model<IUserDocument, IUserModel>(\"User\", UserSchema);\r\n","import QueryResolver from \"./query\";\r\nimport MutationResolver from \"./mutation\";\r\nimport SubscriptionResolver from \"./subscription\";\r\n\r\nexport default { ...QueryResolver, ...MutationResolver, ...SubscriptionResolver };","import { ApolloError } from \"apollo-server-express\";\r\nimport jwt from \"jsonwebtoken\";\r\n\r\n// local\r\nimport { IUserDocument, User } from \"../model\";\r\nimport { ILooseUserInput, IStrictUserInput } from \"../typedef\";\r\nimport {\r\n\tattemptSignIn,\r\n\tattemptSignOut\r\n} from \"../../../helpers/functions/authentication\";\r\nimport { mapUser } from \"../mapper\";\r\nimport { IContext } from \"../../../types\";\r\nimport { sendVerificationEmail } from \"../../../helpers/functions/sendVerificationEmail\";\r\nimport { ISkillIdInput } from \"../../skill/typedef\";\r\nimport { TokenConfig } from \"../../../config\";\r\n\r\ntype DeepPartial<T> = {\r\n\t[K in keyof T]?: Partial<T[K]>;\r\n};\r\n\r\nexport default {\r\n\tMutation: {\r\n\t\tcreateUser: async (\r\n\t\t\tparent: any,\r\n\t\t\targs: { input: IStrictUserInput },\r\n\t\t\tcontext: IContext,\r\n\t\t\tinfo: any\r\n\t\t) => {\r\n\t\t\tconst user = await User.create<DeepPartial<IUserDocument>>(args.input);\r\n\r\n\t\t\tconst token = jwt.sign(\r\n\t\t\t\t{ userId: user.id, email: user.accountInfo.email },\r\n\t\t\t\tTokenConfig.tokenSecret,\r\n\t\t\t\t{ expiresIn: parseInt(TokenConfig.tokenExpiry) }\r\n\t\t\t);\r\n\r\n\t\t\tsendVerificationEmail(user, token);\r\n\r\n\t\t\treturn mapUser(user, context);\r\n\t\t},\r\n\r\n\t\teditUser: async (\r\n\t\t\tparent: any,\r\n\t\t\targs: { input: ILooseUserInput },\r\n\t\t\tcontext: IContext,\r\n\t\t\tinfo: any\r\n\t\t) => {\r\n\t\t\tconst user = await User.findById(args.input.userId);\r\n\r\n\t\t\tif (!user) throw new ApolloError(\"User not found.\");\r\n\r\n\t\t\tdelete args.input[\"userId\"];\r\n\r\n\t\t\tconst doc: Partial<IUserDocument> = {\r\n\t\t\t\taccountInfo:\r\n\t\t\t\t\t\"accountInfo\" in args.input\r\n\t\t\t\t\t\t? {\r\n\t\t\t\t\t\t\t\t...user.toObject().accountInfo,\r\n\t\t\t\t\t\t\t\t...args.input.accountInfo\r\n\t\t\t\t\t\t  }\r\n\t\t\t\t\t\t: user.toObject().accountInfo,\r\n\t\t\t\tpersonalInfo:\r\n\t\t\t\t\t\"personalInfo\" in args.input\r\n\t\t\t\t\t\t? {\r\n\t\t\t\t\t\t\t\t...args.input.personalInfo,\r\n\t\t\t\t\t\t\t\tinterests:\r\n\t\t\t\t\t\t\t\t\t\"interests\" in args.input.personalInfo\r\n\t\t\t\t\t\t\t\t\t\t? (args.input.personalInfo\r\n\t\t\t\t\t\t\t\t\t\t\t\t.interests as ISkillIdInput[]).map(\r\n\t\t\t\t\t\t\t\t\t\t\t\tinterest => interest.skillId\r\n\t\t\t\t\t\t\t\t\t\t  )\r\n\t\t\t\t\t\t\t\t\t\t: user.personalInfo.interests\r\n\t\t\t\t\t\t  }\r\n\t\t\t\t\t\t: user.toObject().personalInfo\r\n\t\t\t};\r\n\r\n\t\t\tawait user.updateOne(doc, (err, raw) => {\r\n\t\t\t\tif (err) throw new ApolloError(err);\r\n\t\t\t});\r\n\r\n\t\t\treturn mapUser(Object.assign(user, doc), context);\r\n\t\t},\r\n\r\n\t\tsignIn: async (\r\n\t\t\tparent: any,\r\n\t\t\t{ email, password }: { email: string; password: string },\r\n\t\t\tcontext: IContext,\r\n\t\t\tinfo: any\r\n\t\t) => {\r\n\t\t\treturn mapUser(await attemptSignIn(email, password, context), context);\r\n\t\t},\r\n\r\n\t\tsignOut: async (parent: any, args: any, context: IContext, info: any) => {\r\n\t\t\tawait User.findByIdAndUpdate(context.req.session.userId, {\r\n\t\t\t\t\"statusInfo.lastActive\": new Date().getTime()\r\n\t\t\t});\r\n\t\t\treturn attemptSignOut(context);\r\n\t\t}\r\n\t}\r\n};\r\n","//local\r\nimport { User } from \"../model\";\r\nimport { mapUser } from \"../mapper\";\r\nimport { IContext } from \"../../../types\";\r\n\r\nexport default {\r\n\tQuery: {\r\n\t\tusers: async (parent: any, args: any, context: IContext, info: any) =>\r\n\t\t\t(await User.find({})).map(userDoc => mapUser(userDoc, context)),\r\n\t\tme: async (parent: any, args: any, context: IContext, info: any) =>\r\n\t\t\tmapUser(await User.findById(context.req.session.userId), context),\r\n\t\tuser: async (\r\n\t\t\tparent: any,\r\n\t\t\targs: { userId: string },\r\n\t\t\tcontext: IContext,\r\n\t\t\tinfo: any\r\n\t\t) => mapUser(await User.findById(args.userId), context)\r\n\t}\r\n};\r\n","import { User } from \"../model\";\r\n\r\nexport default {\r\n\tSubscription: {}\r\n};\r\n","import { gql } from \"apollo-server-express\";\r\n\r\nexport default gql`\r\n\tinput StrictUserAccountInfoInput {\r\n\t\temail: String!\r\n\t\tpassword: String!\r\n\t\thandler: String!\r\n\t\tname: String!\r\n\t}\r\n\r\n\tinput StrictUserInput {\r\n\t\taccountInfo: StrictUserAccountInfoInput!\r\n\t}\r\n\r\n\tinput LooseUserPersonalInfoInput {\r\n\t\tbio: String\r\n\t\tbirthDate: Date\r\n\t\tinterests: [SkillIdInput!]\r\n\t}\r\n\r\n\tinput LooseUserAccountInfoInput {\r\n\t\temail: String\r\n\t\tpassword: String\r\n\t\thandler: String\r\n\t\tname: String\r\n\t}\r\n\r\n\tinput LooseUserInput {\r\n\t\tuserId: ID!\r\n\t\taccountInfo: LooseUserAccountInfoInput\r\n\t\tpersonalInfo: LooseUserPersonalInfoInput\r\n\t}\r\n\r\n\textend type Query {\r\n\t\tusers: [User!]\r\n\t\tuser(userId: ID!): User!\r\n\t\tme: User! @auth\r\n\t}\r\n\r\n\textend type Mutation {\r\n\t\tcreateUser(input: StrictUserInput!): User! @guest\r\n\t\teditUser(input: LooseUserInput!): User! @auth\r\n\t\tsignIn(email: String!, password: String!): User! @guest\r\n\t\tsignOut: Boolean! @auth\r\n\t}\r\n\r\n\ttype UserAccountInfo {\r\n\t\tname: String!\r\n\t\temail: String\r\n\t\tpassword: String\r\n\t\thandler: String!\r\n\t\tverifiedEmail: Boolean!\r\n\t}\r\n\r\n\ttype UserPersonalInfo {\r\n\t\tbio: String\r\n\t\tbirthDate: Date\r\n\t\tinterests: [Skill!]\r\n\t}\r\n\r\n\ttype UserStatusInfo {\r\n\t\tisOnline: Boolean!\r\n\t\tlastActive: Date\r\n\t}\r\n\r\n\ttype User {\r\n\t\tid: ID!\r\n\t\taccountInfo: UserAccountInfo!\r\n\t\tpersonalInfo: UserPersonalInfo!\r\n\t\tstatusInfo: UserStatusInfo!\r\n\t\tconversations: [Conversation!]\r\n\t}\r\n`;\r\n\r\nexport { IUser, ILooseUserInput, IStrictUserInput } from \"./types\";\r\n","import nodemailer from \"nodemailer\";\r\nimport { GmailConfig } from \"../../config\";\r\n\r\nexport default nodemailer.createTransport({\r\n\tservice: \"gmail\",\r\n\tsender: GmailConfig.gmailSender,\r\n\tauth: {\r\n\t\tuser: GmailConfig.gmailUser,\r\n\t\tpass: GmailConfig.gmailPassword\r\n\t}\r\n});\r\n","import { ApolloError, AuthenticationError } from \"apollo-server-express\";\r\n\r\n//local\r\nimport { User } from \"../../entities/user/model\";\r\nimport { IContext } from \"../../types\";\r\nimport { SessionConfig } from \"../../config\";\r\n\r\nexport const ensureSignedIn = (context: IContext) => {\r\n\tif (!context.req.session.userId)\r\n\t\tthrow new AuthenticationError(\"You must be signed in.\");\r\n};\r\n\r\nexport const ensureSignedOut = (context: IContext) => {\r\n\tif (context.req.session.userId)\r\n\t\tthrow new AuthenticationError(\"You must be signed out.\");\r\n};\r\n\r\nexport const attemptSignIn = async (\r\n\temail: string,\r\n\tpassword: string,\r\n\tcontext: IContext\r\n) => {\r\n\tconst user = await User.findOne({ \"accountInfo.email\": email });\r\n\r\n\tif (!user)\r\n\t\tthrow new AuthenticationError(\r\n\t\t\t\"Incorrect password or email. Please try again\"\r\n\t\t);\r\n\r\n\tif (!(await user.comparePassword(password)))\r\n\t\tthrow new AuthenticationError(\r\n\t\t\t\"Incorrect password or email. Please try again.\"\r\n\t\t);\r\n\r\n\tconst result = await User.findByIdAndUpdate(\r\n\t\tuser.id,\r\n\t\t{ isOnline: true },\r\n\t\t(err, res) => {\r\n\t\t\tif (err) throw new ApolloError(err);\r\n\t\t}\r\n\t);\r\n\r\n\tcontext.req.session.userId = user.id;\r\n\r\n\treturn result;\r\n};\r\n\r\nexport const attemptSignOut = (context: IContext) => {\r\n\treturn new Promise((resolve, reject) => {\r\n\t\tUser.updateOne(\r\n\t\t\t{ _id: context.req.session.userId },\r\n\t\t\t{ isOnline: false },\r\n\t\t\t(err, res) => {\r\n\t\t\t\tif (err) reject(err);\r\n\t\t\t}\r\n\t\t);\r\n\t\tcontext.req.session.destroy(err => {\r\n\t\t\tif (err) reject(err);\r\n\t\t\tcontext.res.clearCookie(SessionConfig.sessionName);\r\n\t\t\tresolve(true);\r\n\t\t});\r\n\t});\r\n};\r\n","//local\r\nimport { IUserDocument } from \"../../entities/user/model\";\r\nimport emailer from \"../emailer\";\r\n\r\nexport const sendVerificationEmail = (user: IUserDocument, token: string) => {\r\n\temailer.sendMail({\r\n\t\tfrom: '\"Prashant Joshi (CEO)\" <no-reply@collabs.com>',\r\n\t\tto: `${user.accountInfo.email}`,\r\n\t\tsubject: \"Please verify your email address\",\r\n\t\thtml: `\r\n\t\t<html>\r\n\t\t<head>\r\n\t\t\t<style>\r\n\t\t\t\t* {\r\n\t\t\t\t\tfont-family: \"Proxima Nova\";\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tdiv.main {\r\n\t\t\t\t\twidth: fit-content;\r\n\t\t\t\t\tmargin: 2rem auto;\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tp {\r\n\t\t\t\t\tfont-size: 1rem;\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\ta {\r\n\t\t\t\t\tmargin: 1rem auto;\r\n\t\t\t\t\tdisplay: inline-block;\r\n\t\t\t\t\tpadding: 1rem;\r\n\t\t\t\t\ttext-decoration: none;\r\n\t\t\t\t\tborder-radius: 4pt;\r\n\t\t\t\t\tbackground-color: blue;\r\n\t\t\t\t\tfont-weight: bold;\r\n\t\t\t\t\tcolor: white;\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\ta:hover {\r\n\t\t\t\t\tbackground-color: darkblue;\r\n\t\t\t\t\tcolor: white;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tp.footer {\r\n\t\t\t\t\tfont-size: .8rem;\r\n\t\t\t\t\tcolor: grey;\r\n\t\t\t\t}\r\n\t\t\t</style>\r\n\t\t</head>\r\n\t\t<body>\r\n\t\t\t<div class=\"main\">\r\n\t\t\t<h1>\r\n\t\t\t\tThank you for registering for Collabs.io\r\n\t\t\t</h1>\r\n\t\t\t<hr>\r\n\t\t\t<p>\r\n\t\t\t\tHey,<br>\r\n\t\t\t\tI am the CEO of <b>Collabs.io</b>, and you have a great journey ahead with us.<br>\r\n\t\t\t\tYou can confirm your email by cliking the button below.\r\n\t\t\t</p>\r\n\t\t\t<a href=\"http:localhost:4000/auth/verify-email/${token}\">\r\n\t\t\t\tConfirm your email\r\n\t\t\t</a>\r\n\t\t\t<p class=\"footer\">\r\n\t\t\t\tCollabs.io\r\n\t\t\t</p>\r\n\t\t</div>\r\n\t\t</body>\r\n\t</html>\t\r\n    `\r\n\t});\r\n\r\n\treturn token;\r\n};\r\n","import connectDatabase from \"./connectDb\";\r\nimport startServer from \"./startServer\";\r\n\r\n(async () => {\r\n\tawait connectDatabase();\r\n\tawait startServer();\r\n})();\r\n","import express from \"express\";\r\nimport verifyEmail from \"./verifyEmail\";\r\n\r\nconst authRoute = express.Router();\r\n\r\nauthRoute.use(\"/verify-email\", verifyEmail);\r\n\r\nexport default authRoute;\r\n","import express from \"express\";\r\nimport verifyEmail from \"./verifyEmail\";\r\n\r\nconst route = express.Router();\r\n\r\nroute.use(\"/:token\", verifyEmail);\r\n\r\nexport default route;\r\n","import jwt from \"jsonwebtoken\";\r\n\r\n//local\r\nimport { TokenConfig } from \"../../../config\";\r\nimport { User } from \"../../../entities/user/model\";\r\n\r\nexport default async function (req, res, next) {\r\n\tconst { token } = req.params;\r\n\ttry {\r\n\t\tconst payload = (await jwt.verify(token, TokenConfig.tokenSecret)) as {\r\n\t\t\tuserId: string;\r\n\t\t\temail: string;\r\n\t\t};\r\n\r\n\t\tawait User.findByIdAndUpdate(payload.userId as string, {\r\n\t\t\t\"accountInfo.verifiedEmail\": true\r\n\t\t});\r\n\r\n\t\tres.send(`<h1>Your email ${payload.email} is verified</h1>`);\r\n\t\tnext();\r\n\t} catch (err) {\r\n\t\tres.send(\"<h1>Token is expired</h1>\");\r\n\t\tnext();\r\n\t}\r\n}\r\n","import express, { RouterOptions } from \"express\";\r\nimport { nextTick } from \"process\";\r\nimport auth from \"./auth\";\r\n\r\nconst routes = express.Router();\r\n\r\nroutes.use(\"/auth\", auth);\r\n\r\nroutes.get(\"/\", (req, res, next) => {\r\n\tres.status(200).json({ message: \"Connected!\" });\r\n\tnext();\r\n});\r\n\r\nexport default routes;\r\n","import mongoose from \"mongoose\";\r\nimport connectMongo from \"connect-mongo\";\r\nimport session from \"express-session\";\r\nimport { SessionConfig } from \"./config\";\r\nimport { MongoConfig } from \"./config\";\r\n\r\nconst MongoStore = connectMongo(session);\r\nconst connection = mongoose.createConnection(\r\n\t`mongodb+srv://${MongoConfig.mongoUserName}:${MongoConfig.mongoUserPassword}@cluster0.vuqtk.mongodb.net/${MongoConfig.mongoDatabaseName}?retryWrites=true&w=majority`,\r\n\t{ useUnifiedTopology: true, useNewUrlParser: true }\r\n);\r\n\r\nconnection.on(\"error\", function (err) {\r\n\tconsole.log(\"[MONGOSTORE] Error connecting to MongoStore\");\r\n});\r\n\r\nconst store = new MongoStore({\r\n\tmongooseConnection: connection,\r\n\tcollection: \"sessions\"\r\n});\r\n\r\n(store as any).on(\"error\", function (error) {\r\n\tconsole.log(\"[SERVER]  Error connecting to the mongodb store\");\r\n});\r\n\r\nconst mySession = session({\r\n\tstore,\r\n\tname: SessionConfig.sessionName,\r\n\tsecret: SessionConfig.sessionSecret,\r\n\trolling: true,\r\n\tresave: true,\r\n\tsaveUninitialized: false,\r\n\tcookie: {\r\n\t\tmaxAge: parseInt(SessionConfig.sessionLifetime)\r\n\t}\r\n});\r\n\r\nexport default mySession;\r\n","import { ApolloServer } from \"apollo-server-express\";\r\nimport express from \"express\";\r\n\r\nconsole.log(process.env.PORT);\r\n\r\n//local\r\nimport { TypeDefs, Resolvers } from \"./entities\";\r\nimport SchemaDirectives from \"./entities/customDirectives\";\r\nimport session from \"./session\";\r\nimport dataloaders from \"./dataloaders\";\r\nimport routes from \"./routes\";\r\nimport { IContext } from \"./types\";\r\n\r\nexport default async function () {\r\n\tconst app = express();\r\n\r\n\tapp.disable(\"x-powered-by\");\r\n\tapp.use(\"/\", routes);\r\n\tapp.use(session);\r\n\r\n\tconst server = new ApolloServer({\r\n\t\ttypeDefs: TypeDefs,\r\n\t\tresolvers: Resolvers,\r\n\t\tschemaDirectives: SchemaDirectives,\r\n\t\tplayground: {\r\n\t\t\tsettings: {\r\n\t\t\t\t\"request.credentials\": \"include\"\r\n\t\t\t}\r\n\t\t},\r\n\t\tcontext: async ({ req, res }): Promise<IContext> => {\r\n\t\t\treturn {\r\n\t\t\t\treq,\r\n\t\t\t\tres,\r\n\t\t\t\tdataloaders\r\n\t\t\t};\r\n\t\t}\r\n\t});\r\n\r\n\tserver.applyMiddleware({\r\n\t\tapp,\r\n\t\tcors: {\r\n\t\t\tcredentials: true,\r\n\t\t\torigin: \"http://localhost:9000\"\r\n\t\t}\r\n\t});\r\n\r\n\tapp.listen({ port: process.env.PORT || 4000 }, () => {\r\n\t\tconsole.log(`[SERVER] ready at http://localhost:4000${server.graphqlPath}`);\r\n\t});\r\n}\r\n","module.exports = require(\"apollo-server-express\");;","module.exports = require(\"bcrypt\");;","module.exports = require(\"connect-mongo\");;","module.exports = require(\"dataloader\");;","module.exports = require(\"dotenv\");;","module.exports = require(\"express\");;","module.exports = require(\"express-session\");;","module.exports = require(\"graphql\");;","module.exports = require(\"graphql/language\");;","module.exports = require(\"jsonwebtoken\");;","module.exports = require(\"mongoose\");;","module.exports = require(\"nodemailer\");;","module.exports = require(\"ramda\");;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tif(__webpack_module_cache__[moduleId]) {\n\t\treturn __webpack_module_cache__[moduleId].exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module\n// This entry module is referenced by other modules so it can't be inlined\n__webpack_require__(3607);\n"],"sourceRoot":""}